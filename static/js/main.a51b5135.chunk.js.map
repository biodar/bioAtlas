{"version":3,"sources":["JSUtils.js","h5.js","App.js","reportWebVitals.js","index.js"],"names":["isString","x","undefined","constructor","String","isNumber","Number","isBoolean","Boolean","exports","randomToNumber","n","Math","floor","random","isObject","Object","isArray","Array","isDate","d","prototype","toString","call","isNaN","getTime","sanitizeFloat","number","parseFloat","sanitizeInt","parseInt","sanitizeString","string","sanitizeStringNonNull","sanitizeBool","bool","isEmptyOrSpaces","str","match","hdf5","window","beamHeight","options","range","elevation","k","lat","re","rp","er","a","b","PI","sqrt","cos","sin","toFixed","earthRadius","turf","files","App","useState","xyz","setXYZ","loading","setLoading","useEffect","map","e","file","url","callback","fetch","then","response","ok","arrayBuffer","buffer","f","File","data","get","value","where","attrs","what","elangles","filter","catch","error","console","log","h5GetData","obj","gain","offset","dbz","substr","indexOf","dd","Date","slice","radarLonLats","values","rlon","rlat","elangle","date","xyzs","t","r","rm","ralt","push","valuesToLonLatAlt","lon","toISOString","currXYZ","concat","geojson","featureCollection","point","alt","v","length","layerName","column","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a51b5135.chunk.js","sourcesContent":["/*\nUtility Functions\n\nthanks https://github.com/realm/github-gantt/blob/master/utilities.js\n\n*/\nvar isString = function(x) {\n    return x !== null && x !== undefined && x.constructor === String\n}\n\nvar isNumber = function(x) {\n    return x !== null && x !== undefined && x.constructor === Number\n}\n\nvar isBoolean = function(x) {\n    return x !== null && x !== undefined && x.constructor === Boolean\n}\n\nvar isObject = function(x) {\n    return x !== null && x !== undefined && x.constructor === Object\n}\n\nvar isArray = function(x) {\n    return x !== null && x !== undefined && x.constructor === Array\n}\n\nvar isDate = function(d) {\n  if ( Object.prototype.toString.call(d) === \"[object Date]\" ) {\n    if ( isNaN( d.getTime() ) ) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n  else {\n    return false;\n  }\n}\n\n// var isRealmObject = function(x) {\n//     return x !== null && x !== undefined && x.constructor === Realm.Object\n// }\n\n// var isRealmList = function(x) {\n//     return x !== null && x !== undefined && x.constructor === Realm.List\n// }\n\nvar sanitizeFloat = function(number) {\n    if (isNumber(number)) {\n        return number;\n    }\n    else if (isString(number)) {\n        let n = parseFloat(number);\n        if (isNaN(n)) {\n          return null;\n        }\n        else {\n          return n;\n        }\n    }\n    else {\n        return null;\n    }\n}\n\nvar sanitizeInt = function(number) {\n    if (isNumber(number)) {\n        return number;\n    }\n    else if (isString(number)) {\n        return parseInt(number);\n    }\n    else {\n        return null;\n    }\n}\n\nvar sanitizeString = function(string) {\n    if (isString(string)) {\n        return string;\n    }\n    else if (isNumber(string)) {\n        return string.toString();\n    }\n    else {\n        return null;\n    }\n}\n\nvar sanitizeStringNonNull = function(string) {\n    if (isString(string)) {\n        return string;\n    }\n    else if (isNumber(string)) {\n        return string.toString();\n    }\n    else {\n        return \"\";\n    }\n}\n\nvar sanitizeBool = function(bool) {\n    if (isBoolean(bool)) {\n        return bool;\n    }\n    else if (isNumber(bool)) {\n        return Boolean(bool);\n    }\n    else {\n        return null;\n    }\n}\n\nfunction isEmptyOrSpaces(str){\n  return str === null || str.match(/^ *$/) !== null;\n}\n\nfunction randomToNumber (n = 0) {\n  return Math.floor(Math.random() * n)\n}\n\nexports.randomToNumber = randomToNumber;\nexports.isBoolean = isBoolean;\nexports.isString = isString;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.isArray = isArray;\nexports.isDate = isDate;\n// exports.isRealmObject = isRealmObject;\n// exports.isRealmList = isRealmList;\nexports.sanitizeFloat = sanitizeFloat;\nexports.sanitizeInt = sanitizeInt;\nexports.sanitizeString = sanitizeString;\nexports.sanitizeStringNonNull = sanitizeStringNonNull;\nexports.sanitizeBool = sanitizeBool;\nexports.isEmptyOrSpaces = isEmptyOrSpaces;","import { isArray, isNumber, isString } from \"./JSUtils\";\nconst hdf5 = window.hdf5;\n\nconst h5GetData = (url, file, callback) => {\n  if (!isString(file) || !isString(url)\n    || !url || !file) return null;\n\n  // console.log('fetching...')\n  fetch(url)\n    .then(function (response) {\n      // console.log(response)\n      if(!response.ok) return null\n      return response.arrayBuffer()\n    })\n    .then(function (buffer) {\n      var f = new hdf5.File(buffer, file);\n      const data = f.get('dataset1/data1/data').value;\n      const where = f.get('where').attrs;\n      const what = f.get('dataset1/data1/what').attrs;\n      // TODO [...new Set(items)]\n      const elangles = f.get('dataset1/how/elangles').value;\n      // console.log('data: ', data);\n      typeof callback === 'function' &&\n        callback({ data: data.filter(e => e !== 0), \n          where, what, elangles});\n      // data.slice(0, 500).map( e => console.log(e >= 618))\n      // console.log('what: ', what)\n      // console.log('data10: ', f.get('dataset1/data10'))\n      // console.log('where: ', f.get('where'))\n      // do something with f;\n      // let g = f.get('group');\n      // let d = f.get('group/dataset');\n      // let v = d.value;\n      // let a = d.attrs;\n    })\n    .catch(error => {\n      console.log(error)\n    });\n}\n/**\n * Function to translate radar values to xyz points in geographic space.\n * More documentation will be written on the method fod going it. \n * \n * Currently the code is written as JS version fo the R code\n * written by Dr Chris Hassall here:\n * https://github.com/biodar/bdformats/blob/master/Reading%20HDF5%20in%20R.R\n * \n * @param {Object} options \n * @returns \n */\nconst valuesToLonLatAltdBZ = (options) => {\n  // See Maryna's email range up to 50km\n  // that is 50000/600 ~ 80 out of the 425 ranges\n  const { values, rlon, rlat, range = 80, elangle = 1,\n  date } = options;\n  const xyzs = [];\n  if (!isArray(values) || !isNumber(+rlon) ||\n    !isNumber(rlat)) {\n    return null\n  }\n  for (let t = 0; t < 360; t++) {\n    for (let r = 0; r < range; r++) {\n      // for each theta radar goes 425 ranges\n      // values[a*r] \n      // see https://www.weather.gov/media/lmk/soo/Dual_Pol_Overview.pdf\n      if(values[t*r] > 2 || values[t*r] < 0.25) continue\n      const rm = r * 600;\n      const ralt = beamHeight({range: rm, elevation: elangle, lat: rlat})\n      // console.log(ralt);\n      xyzs.push([\n        //delta / 111320 * cos (rlat)\n        rlon + ((rm * Math.sin(t)) / 110540),\n        rlat + ((rm * Math.cos(t)) / 111320 * Math.cos(rlat)),\n        // TODO \n        // z\n        +ralt.toFixed(0),\n        //zdr\n        values[t*r],\n        // convertRange(+values[t*r].toFixed(1), {\n        //   oldMin:0.25, oldMax: 2, newMin: 1, newMax: 10\n        // }),\n        //date\n        date\n      ])\n    }\n  }\n  return xyzs;\n}\n\nconst beamHeight = (options) => {\n  const {range, elevation, k = 4/3, lat, re = 6378, rp = 6357} = options;\n  if(!isNumber(range) || !isNumber(k) || !isNumber(elevation) || !isNumber(lat)\n  || !isNumber(re) || !isNumber(rp)) return null;\n  \n  //from https://github.com/adokter/bioRad/blob/master/R/beam.R\n  const earthRadius = (a, b, lat) => {\n    lat = lat * Math.PI / 180\n    const r = +(1000 * Math.sqrt(\n      ((a**2 * Math.cos(lat))**2 + (b**2 * Math.sin(lat))**2) /\n        ((a * Math.cos(lat))**2 + (b * Math.sin(lat))**2)\n    )).toFixed(2)\n    return r;\n  }\n\n  // sqrt(\n  //   range^2 + (k * earth_radius(re, rp, lat))^2 +\n  //     2 * range * (k * earth_radius(re, rp, lat)) * sin(elev * pi / 180)\n  // ) - k * earth_radius(re, rp, lat)\n  const er = earthRadius(re, rp, lat);\n  const bh = Math.sqrt(\n    range ** 2 + (k * er) ** 2 +\n    2 * range * (k * er) * Math.sin(elevation * Math.PI / 180)\n  ) - k * er;\n\n  return +bh.toFixed(2)\n}\n\nexport {\n  valuesToLonLatAltdBZ as valuesToLonLatAlt,\n  beamHeight,\n  h5GetData\n}","import React, { useEffect, useState } from 'react';\nimport Eatlas from 'eatlas';\n\nimport './App.css';\nimport { h5GetData, valuesToLonLatAlt } from './h5';\nimport { isDate } from './JSUtils';\n\n// const files = require('./files.json');\n\nconst turf = window.turf;\nconst files = [\n  // \"202007170006_polar_pl_radar20b3_augzdr_lp.h5\",\n  // \"202007170006_polar_pl_radar20b4_augzdr_lp.h5\",\n  // \"202007170007_polar_pl_radar20b2_augzdr_lp.h5\",\n  // \"202007170008_polar_pl_radar20b1_augzdr_lp.h5\",\n  // \"202007170009_polar_pl_radar20b0_augzdr_lp.h5\",\n  // \"202007170004_polar_pl_radar20b0_augzdr_lp.h5\",\n  // \"202007170003_polar_pl_radar20b1_augzdr_lp.h5\",\n  // \"202007170002_polar_pl_radar20b2_augzdr_lp.h5\",\n  // \"202007170002_polar_pl_radar20b3_augzdr_lp.h5\",\n  // \"202007170002_polar_pl_radar20b4_augzdr_lp.h5\"\n  \"202007170002_polar_pl_radar20b2_augzdr_lp.h5\"\n]\nfunction App() {\n  const [xyz, setXYZ] = useState([])\n  const [loading, setLoading] = useState(true)\n  useEffect(() => {\n    files.map(e => processH5(\"https://raw.githubusercontent.com/biodar/bdformats/master/\" + e, e));\n  }, [])\n\n  // console.log(xyz);\n  // TODO: clearly not best for xyz\n  const getBio = (v) => v < 0.5 ? 1 : v < 1 ? 2 :\n  v < 1.5 ? 3 : 4\n  const geojson = turf.featureCollection(\n    \n    xyz.map(e => turf.point(e.slice(0,3), \n    {alt: e.slice(2,3)[0], value: getBio(e.slice(3,4)[0]),\n      date: e.slice(4)[0]\n    }))\n  )\n  // console.log(geojson.features.slice(0,10));\n  if(!xyz || !xyz.length) return(\n    <div className=\"App\">\n      <div className=\"App-header\"> {\n        loading ? \"Loading...\" : \"No data\"\n      } </div>\n    </div>\n  )\n  return (\n    <> \n    <Eatlas\n      layerName=\"pointcloud\"\n      data={geojson} column=\"value\" />\n    </>\n  );\n\n  function processH5(url, file) {\n    h5GetData(url, file, (obj) => {\n      // console.log(obj)\n      const { data, where, what } = obj;\n      // console.log(obj.elangles);\n      const gain = +what.gain, offset = +what.offset;\n      const dbz = data.map(e => +((e * gain) + offset).toFixed(4))\n      // obj == {data: Array, where: Object, elangles: Array}\n      // obj.where => \n      // height: 222\n      // lat: 51.29417\n      // lon: 0.60639\n      // source_local_grid_easting: 5817\n      // source_local_grid_northing: 1583\n      const d = file.substr(0, file.indexOf(\"_polar_pl\"));\n      const dd = new Date(\n        d.slice(0,4), +d.slice(4,6) - 1, d.slice(6,8), d.slice(8,10),\n        d.slice(10)\n      )\n      const radarLonLats = valuesToLonLatAlt({\n        // values, rlon, rlat \n        values: dbz, rlon: where.lon, rlat: where.lat,\n        elangle: obj.elangles[0], \n        date: isDate(dd) && dd.toISOString()\n      });\n      // const gj = turf.featureCollection(\n      //   radarLonLats.map((e, i) => turf.point(e, { value: dbz[i] }))\n      // );\n      setLoading(false)\n      setXYZ(currXYZ => {\n        return(radarLonLats.concat(currXYZ))\n      })\n    });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}